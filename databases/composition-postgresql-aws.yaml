---
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: xdatabases.aws.platform.example.com
  labels:
    provider: aws
    service: database
    engine: postgresql
    app.kubernetes.io/managed-by: argocd
spec:
  writeConnectionSecretsToNamespace: crossplane-system
  
  compositeTypeRef:
    apiVersion: platform.example.com/v1alpha1
    kind: XDatabase
  
  # Seleção automática baseada em labels
  mode: Pipeline
  pipeline:
  - step: patch-and-transform
    functionRef:
      name: function-patch-and-transform
    input:
      apiVersion: pt.fn.crossplane.io/v1beta1
      kind: Resources
      resources:
      
      # 1. Security Group
      - name: security-group
        base:
          apiVersion: ec2.aws.upbound.io/v1beta1
          kind: SecurityGroup
          spec:
            forProvider:
              description: "Security group for database"
              tags:
                Name: ""
                ManagedBy: "crossplane"
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.environment
          toFieldPath: spec.forProvider.tags.Environment
        - type: FromCompositeFieldPath
          fromFieldPath: spec.costCenter
          toFieldPath: spec.forProvider.tags.CostCenter
        - type: FromCompositeFieldPath
          fromFieldPath: spec.owner
          toFieldPath: spec.forProvider.tags.Owner
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.forProvider.tags.Name
        - type: FromCompositeFieldPath
          fromFieldPath: spec.networkRef.id
          toFieldPath: spec.forProvider.vpcId
      
      # 2. DB Subnet Group
      - name: db-subnet-group
        base:
          apiVersion: rds.aws.upbound.io/v1beta1
          kind: SubnetGroup
          spec:
            forProvider:
              description: "Subnet group for database"
              tags:
                ManagedBy: "crossplane"
        patches:
        - type: FromCompositeFieldPath
          fromFieldPath: spec.networkRef.subnetIds
          toFieldPath: spec.forProvider.subnetIds
        - type: FromCompositeFieldPath
          fromFieldPath: spec.environment
          toFieldPath: spec.forProvider.tags.Environment
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.forProvider.tags.Name
      
      # 3. RDS Instance
      - name: rds-instance
        base:
          apiVersion: rds.aws.upbound.io/v1beta1
          kind: Instance
          spec:
            forProvider:
              engine: postgres
              autoMinorVersionUpgrade: true
              backupRetentionPeriod: 7
              copyTagsToSnapshot: true
              deletionProtection: false
              enabledCloudwatchLogsExports:
              - postgresql
              - upgrade
              skipFinalSnapshot: true
              storageEncrypted: true
              tags:
                ManagedBy: "crossplane"
            writeConnectionSecretToRef:
              namespace: crossplane-system
        
        patches:
        # Engine version
        - type: FromCompositeFieldPath
          fromFieldPath: spec.engineVersion
          toFieldPath: spec.forProvider.engineVersion
        
        # Size mapping (small/medium/large -> instance type)
        - type: FromCompositeFieldPath
          fromFieldPath: spec.size
          toFieldPath: spec.forProvider.instanceClass
          transforms:
          - type: map
            map:
              small: db.t3.micro
              medium: db.t3.medium
              large: db.m5.large
              xlarge: db.m5.2xlarge
        
        # Storage
        - type: FromCompositeFieldPath
          fromFieldPath: spec.storageGB
          toFieldPath: spec.forProvider.allocatedStorage
        
        # High Availability
        - type: FromCompositeFieldPath
          fromFieldPath: spec.highAvailability
          toFieldPath: spec.forProvider.multiAz
        
        # Backup configuration
        - type: FromCompositeFieldPath
          fromFieldPath: spec.backup.retentionDays
          toFieldPath: spec.forProvider.backupRetentionPeriod
        - type: FromCompositeFieldPath
          fromFieldPath: spec.backup.window
          toFieldPath: spec.forProvider.backupWindow
        
        # Network
        - type: FromCompositeFieldPath
          fromFieldPath: spec.publiclyAccessible
          toFieldPath: spec.forProvider.publiclyAccessible
        
        # References
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.forProvider.dbSubnetGroupNameSelector.matchLabels[Name]
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.forProvider.vpcSecurityGroupIdSelector.matchLabels[Name]
        
        # Tags
        - type: FromCompositeFieldPath
          fromFieldPath: spec.environment
          toFieldPath: spec.forProvider.tags.Environment
        - type: FromCompositeFieldPath
          fromFieldPath: spec.costCenter
          toFieldPath: spec.forProvider.tags.CostCenter
        - type: FromCompositeFieldPath
          fromFieldPath: spec.owner
          toFieldPath: spec.forProvider.tags.Owner
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.forProvider.tags.Name
        
        # Secret name
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
          - type: string
            string:
              fmt: "%s-connection"
        
        # Status fields
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.endpoint
          toFieldPath: status.endpoint
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.port
          toFieldPath: status.port
        - type: ToCompositeFieldPath
          fromFieldPath: status.conditions[?(@.type=='Ready')].status
          toFieldPath: status.status
        
        connectionDetails:
        - name: username
          fromConnectionSecretKey: username
        - name: password
          fromConnectionSecretKey: password
        - name: endpoint
          fromConnectionSecretKey: endpoint
        - name: port
          fromConnectionSecretKey: port
        - name: database
          fromConnectionSecretKey: database

